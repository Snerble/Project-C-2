
@inject IJSRuntime JSRuntime
@inject AppDbContext Context

<h3>DbTesting</h3>

<div>
	<ul>
		@foreach (var user in Context.Users)
		{
			<li><User model="@user" /></li>
		}
	</ul>

	<select @bind="selection">
		<option value="create">Create</option>
		<option value="delete">Remove</option>
		<option value="update">Update</option>
	</select><br />

	@switch (selection)
	{
		case "create":
			<input type="text" @bind="name" /><br />
			<input type="number" @bind="age" /><br />
			<button @onclick="Create">Create User</button>
			break;
		case "delete":
			<input type="number" @bind="id" /><br />
			if (user?.Id != id)
				user = Context.Users.Find(id);

			if (user is null)
			{
				<strong>No such user</strong>
			}
			else
			{
				<button @onclick="Remove">Remove User</button>
			}
			break;
		case "update":
			<input type="number" @bind="id" /><br />
			if (user?.Id != id)
			{
				user = Context.Users.Find(id);
				name = user?.Name;
				age = user?.Age ?? 0;
			}
			if (user is null)
			{
				<strong>No such user</strong>
			}
			else
			{
				<input type="text" @bind="name" /><br />
				<input type="number" @bind="age" /><br />
				<button @onclick="Edit">Edit User</button>
			}
			break;
		default:
			break;
	}
</div>

@code {
	private string selection = "create";

	Server.Data.Models.User user;
	int id;
	string name;
	int age;

	public async Task Create()
	{
		Context.Add(new Server.Data.Models.User() { Name = name, Age = age });
		await Context.SaveChangesAsync();
	}

	public async Task Remove()
	{
		if (user is null)
		{
			await JSRuntime.InvokeAsync<string>("alert", $"No user with id {id} exists!");
			return;
		}
		Context.Remove(user);
		user = null;
		await Context.SaveChangesAsync();
	}

	public async Task Edit()
	{
		(user.Name, user.Age) = (name, age);
		Context.Users.Update(user);
		user = null;
		await Context.SaveChangesAsync();
	}
}