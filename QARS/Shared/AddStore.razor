@inject StoreServices service
@inject AppDbContext dbContext

@using QARS.Data.Models;

<link href="/css/modal.css" rel="stylesheet"/>

<EditForm Model="@NewStore" OnValidSubmit="AddNewStore">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="franchiseeid">Franchisee Id</label>
        <select class="form-control" @bind="@FranchiseeId">
            @foreach (var franchisee in dbContext.Franchisees)
            {
                <option value="@franchisee.Id">@franchisee.Id, @franchisee.FirstName @franchisee.LastName</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="locationaddress">Address</label>
        <input type="text" id="locationaddress" class="form-control" @bind="@NewStore.Location.Address" />
    </div>
    <div class="form-group">
        <label for="locationcity">City</label>
        <input type="text" id="locationcity" class="form-control" @bind="@NewStore.Location.City" />
    </div>
    <div class="form-group">
        <label for="locationzip">ZipCode</label>
        <input type="text" id="locationzip" class="form-control" @bind="@NewStore.Location.ZipCode" />
    </div>
    <div class="form-group">
        <label for="locationcountry">Country</label>
        <input type="text" id="locationcountry" class="form-control" @bind="@NewStore.Location.CountryCode" />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <textarea class="form-control" id="description" rows="3" @bind="@NewStore.Description"></textarea>
    </div>
    <div class="text-center p-3 mb-3">
        <button class="btn btn-success" type="submit">Add Store</button>
    </div>
    <ValidationSummary />
</EditForm>

@code {
    List<Store> Stores = new List<Store>();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    public int FranchiseeId;

    public Store NewStore { get; set; } = new Store()
    {
        Location = new Location()         
    };


    private async Task AddNewStore()
    {
        NewStore.LocationId = NewStore.Location.Id;
        var franchisee = dbContext.Franchisees.FirstOrDefault(x => x.Id == FranchiseeId) ?? throw new ArgumentException("No such franchisee");
        NewStore.Franchisee = franchisee;
        await service.AddStoreAsync(NewStore);
        NewStore = new Store()
        {
            Location = new Location(),
            Franchisee = franchisee
        };
        await BlazoredModal.Close(ModalResult.Ok(true));
    }

}
