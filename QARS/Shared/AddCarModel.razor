@inject CarModelServices service
@inject IFileReaderService FileReader

@using QARS.Data.Models
@using System.IO;
@using Tewr.Blazor.FileReader;

<link href="/css/modal.css" rel="stylesheet" />

<EditForm Model="@NewCarModel" OnValidSubmit="AddNewCarModel">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="brand">Brand</label>
        <input placeholder="Fill in the car brand (e.g. 'Tesla')" type="text" id="brand" class="form-control" @bind="@NewCarModel.Brand" />
    </div>
    <div class="form-group">
        <label for="type">Type</label>
        <input placeholder="Fill in the car type (e.g. 'Model 3')" id="type" class="form-control" @bind="@NewCarModel.Type" />
    </div>
    <div class="form-group">
        <label for="category">Category</label><br />
        <small>Select category</small>
        <select class="form-control" @bind="@NewCarModel.Category">
            @foreach (QARS.Data.Models.CarCategory category in Enum.GetValues(typeof(QARS.Data.Models.CarCategory)))
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="dayrate">Day Rate</label><br />
        <small>Fill in the cost of the car per day</small>
        <input id="dayrate" class="form-control" @bind="@NewCarModel.DayRate" />
    </div>
    <div class="form-group">
        <label for="kmrate">Kilometer Rate</label><br />
        <small>Fill in the cost per kilometer</small>
        <input type="text" id="kmrate" class="form-control" @bind="@NewCarModel.KMRate" />
    </div>
    <div class="form-group">
        <label for="freeMileage">Free Mileage</label><br />
        <small>Fill in the amount of free kilometers</small>
        <input type="text" id="freeMileage" class="form-control" @bind="@NewCarModel.FreeMileage" />
    </div>
    <div class="form-group">
        <label for="description">Image</label>
        <input type="file" multiple @ref="InputElement" @oninput="RefreshFileList" />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <textarea placeholder="Write a description for the car" rows="3" type="text" id="description" class="form-control" @bind="@NewCarModel.Description" />
    </div>
    <div class="form-group">
        <label for="doors">Doors</label><br />
        <small>Fill in the amount of doors the car has</small>
        <input id="doors" class="form-control" @bind="@NewCarModel.Doors" />
    </div>
    <div class="form-group">
        <label for="efficiency">Efficiency</label><br />
        <small>Fill in the efficiency in km/L</small>
        <input id="efficiency" class="form-control" @bind="@NewCarModel.Efficiency" />
    </div>
    <div class="form-group">
        <label for="emission">Emission</label><br />
        <small>Fill in the emmission in g CO2/km</small>
        <input type="text" id="emission" class="form-control" @bind="@NewCarModel.Emission" />
    </div>
    <div class="form-group">
        <label for="fuelType">Fuel Type</label><br />
        <small>Select fuel type</small>
        <select class="form-control" @bind="NewCarModel.FuelType">
            @foreach (FuelType fueltype in Enum.GetValues(typeof(FuelType)))
            {
                <option value="@fueltype">@fueltype</option>
            }
        </select>
    </div>
    <div class="form-group">
        <input type="checkbox" name="hasairconditioning" value="True" @bind="@NewCarModel.HasAirconditioning" />
        <label for="hasairconditioning">Has Airconditioning</label><br />
        <small>Check the box if the car has airconditioning</small>
    </div>
    <div class="form-group">
        <label for="passenger">Passengers</label><br />
        <small>Fill in the amount of seats in the car</small>
        <input type="text" id="passenger" class="form-control" @bind="@NewCarModel.Passengers" />
    </div>
    <div class="form-group">
        <label for="suitCases">Suitcases</label><br />
        <small>Fill in the amount of suitcases able to fit in the car</small>
        <input type="text" id="suitCases" class="form-control" @bind="@NewCarModel.SuitCases" />
    </div>
    <div class="form-group">
        <label for="transmission">Transmission</label><br />
        <small>Select transmission</small>
        <select class="form-control" @bind="NewCarModel.Transmission">
            @foreach (TransmissionType transmission in Enum.GetValues(typeof(TransmissionType)))
            {
                <option value="@transmission">@transmission</option>
            }
        </select>
    </div>
    <div class="text-center p-3 mb-3">
        <button type="submit" class="btn btn-success">Add Car Model</button>
    </div>
    <ValidationSummary />
</EditForm>

@code {
    List<QARS.Data.Models.CarModel> CarModels = new List<QARS.Data.Models.CarModel>();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    private ElementReference InputElement;

    private class FileUpload
    {
        /// <summary>
        /// Gets or sets the file that is being uploaded.
        /// </summary>
        public IFileReference File { get; set; }
        /// <summary>
        /// Gets or sets the progress of the file upload.
        /// </summary>
        public float Progress { get; set; } = 0f;
    }

    /// <summary>
    /// Gets the collection of files that are currently
    /// selected and may be getting uploaded.
    /// </summary>
    private List<FileUpload> Files { get; } = new List<FileUpload>();

    private const string DownloadPath = @"Downloads";


    /// <summary>
    /// Refreshes the file list with the current selection from <see cref="InputElement"/>.
    /// </summary>
    private async Task RefreshFileList()
    {
        // Clear the previous selection
        Files.Clear();

        // Enumerate through the files that are selected by InputElement
        // and add them to the files list.
        foreach (var file in await FileReader
            .CreateReference(InputElement)
            .EnumerateFilesAsync())
        {
            Files.Add(new FileUpload { File = file });
        }
    }

    public static byte[] ReadFully(Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = input.Read(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }

    public byte[] upload;

    public QARS.Data.Models.CarModel NewCarModel { get; set; } = new Data.Models.CarModel();
    private async Task AddNewCarModel()
    {
  
        foreach (var file in Files)
        {
            // Ensure the download folder is created
            Directory.CreateDirectory(DownloadPath);

            // Open a readably stream to the file that is selected
            await using var stream = await file.File.OpenReadAsync();
            // Obtain the file info (used to get the filename and to calculate upload progress)
            var info = await file.File.ReadFileInfoAsync();

            // Prepare the read bytes value and the stream read buffer
            int read = 0;
            byte[] buffer = new byte[0x1000 * 8]; // 8KiB

            using var outputFile = new MemoryStream();

            do
            {
                // Copy a section from the stream onto buffer and return how many bytes were actually read
                read = await stream.ReadAsync(buffer);

                // Calculate progress as a 0 to 1 value
                file.Progress = stream.Position / (float)info.Size;

                // Write all the bytes that were written to the buffer onto the output filestream
                await outputFile.WriteAsync(buffer, 0, read);
                // Flushing clears the internal buffers used by the filestream and (probably) saves on memory usage
                await outputFile.FlushAsync();

                // Inform the UI of a state change.
                //  Normally the UI only updates after an action has been performed,
                //  so this just manually tells the UI to update.
                await InvokeAsync(StateHasChanged);
            }

            // Read untill the buffer could not be fully filled (means the stream has reached the end)
            while (read == buffer.Length);

            upload = outputFile.ToArray();
        }

        NewCarModel.Image = upload;
        await service.AddCarModelAsync(NewCarModel);
        NewCarModel = new Data.Models.CarModel();
        await BlazoredModal.Close(ModalResult.Ok(true));
    }
}
