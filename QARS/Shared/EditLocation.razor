@inject AddlocationServices service
@using QARS.Data.Models

<link href="/css/modal.css" rel="stylesheet" />

<EditForm Model="@UpdateLocation" OnValidSubmit="UpdateLocationData">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="address">Address</label>
        <input type="text" id="address" class="form-control" @bind="@UpdateLocation.Address" />
    </div>
    <div class="form-group">
        <label for="city">City</label>
        <input type="text" id="city" class="form-control" @bind="@UpdateLocation.City" />
    </div>
    <div class="form-group">
        <label for="zipcode">ZipCode</label>
        <input type="text" id="zipcode" class="form-control" @bind="@UpdateLocation.ZipCode" />
    </div>
    <div class="form-group">
        <label for="countrycode">CountryCode</label>
        <input type="text" id="countrycode" class="form-control" @bind="@UpdateLocation.CountryCode" />
    </div>
    <div class="text-center p-3 mb-3">
        <button class="btn btn-warning" type="submit">Update</button>
    </div>
    <ValidationSummary />
</EditForm>

@code {
    List<Location> Locations = new List<Location>();

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public Location Location { get; set; }

    Location location { get; set; }

    protected override void OnInitialized()
    {
        location = Location;
        SetLocationForUpdate(location);
    }

    Location UpdateLocation = new Location();
    private void SetLocationForUpdate(Location location)
    {
        UpdateLocation = location;
    }
    private async Task UpdateLocationData()
    {
        await service.UpdatelocationAsync(UpdateLocation);
        await BlazoredModal.Close(ModalResult.Ok<Location>(location));
    }
}

