@page "/Payment/{pickupId}/{pickupDate}/{pickupTime}/{dropoffId}/{dropoffDate}/{dropoffTime}/{carId:int}"
@page "/Payment/{pickupId}/{pickupDate}/{pickupTime}/{dropoffId}/{dropoffDate}/{dropoffTime}/{carId:int}/{extras}"
@inject AppDbContext dbContext
@inject UserManager<User> UserManager
@inject CustomerServices service
@using Microsoft.AspNetCore.Identity
@inject IFileReaderService FileReader
@using QARS.Data.Models
@using System.IO;
@using Tewr.Blazor.FileReader;
@inject ReservationServices reservation_service
@inject CarServices car_service


<link href="/css/payment.css" rel="stylesheet" />

<AuthorizeView Roles="Customer">
    <Authorized>
        <TopMenuCarList pickupLocation="@pickupLocation" pickupDate="@pickupDate" pickupTime="@pickupTime" dropoffLocation="@dropoffLocation" dropoffDate="@dropoffDate" dropoffTime="@dropoffTime" carId="@carId" isVerified="true"/>
        <div class="container payment">
            <div class="row justify-content-around">
                <div class="col-md-5 orderdetails">
                    <h3>Overview</h3><br />
                    <div class="row">
                        <div class="col-md-6">
                            <h4>Pick Up</h4><br />
                            @foreach (var car in Cars)
                            {
                                if (car.Id == carId)
                                {
                                    <p>@car.Store.Name</p>
                                }
                            }
                            @foreach (var location in dbContext.Locations)
                            {
                                if (location.Id == Int32.Parse(pickupId))
                                {
                                    <p>@location.City, @location.CountryCode</p>
                                }
                            }
                            <p>@pickupDate[0]@pickupDate[1]/@pickupDate[2]@pickupDate[3]/@pickupDate[4]@pickupDate[5]@pickupDate[6]@pickupDate[7]</p>
                            <p>@pickupTime[0]@pickupDate[1]:00</p>
                        </div>
                        <div class="col-md-6">
                            <h4>Drop Off</h4><br />

                            @foreach (var store in dbContext.Stores.Where(s => s.LocationId == Int32.Parse(dropoffId)))
                            {
                                <p>@store.Name</p>
                            }

                            @foreach (var location in dbContext.Locations)
                            {
                                if (location.Id == Int32.Parse(dropoffId))
                                {
                                    <p>@location.City, @location.CountryCode</p>
                                }
                            }
                            <p>@dropoffDate[0]@dropoffDate[1]/@dropoffDate[2]@dropoffDate[3]/@dropoffDate[4]@dropoffDate[5]@dropoffDate[6]@dropoffDate[7]</p>
                            <p>@dropoffDate[0]@dropoffDate[1]:00</p>
                        </div>
                    </div><br />
                    <h4>Vehicle</h4><br />
                    <p>Car:</p>
                    @foreach (var car in Cars)
                    {
                        if (car.Id == carId)
                        {
                            <p>@car.Model.Brand @car.Model.Type - @car.Model.FuelType</p><br />
                        }
                    }
                    <br /><p>Extras:</p>
                    @foreach (var extra in extraList)
                    {
                        <p>@extra.Name</p>
                    }

                    <br /><h4>Price Calculations</h4><br />

                    @foreach (var car in Cars)
                    {
                        if (car.Id == carId)
                        {
                            <p>Car:</p>
                            <p>€@totalCarCost.ToString("0.00") + €@car.Model.KMRate.ToString("0.00") / km after @car.Model.FreeMileage.ToString("0") free miles</p><br />
                        }
                    }
                    @if (extraList.Any())
                    {
                        <p>Extras:</p>
                        foreach (var extra in extraList)
                        {
                            <p>@extra.Name - €@extra.Cost.ToString("0.00")</p>
                        }
                        <p>Total - €@totalExtraCost.ToString("0.00")</p><br />

                        <p>Total:</p>
                        <p>€@totalCost.ToString("0.00")</p><br />
                    }
                </div>
                <div class="col-md-5 customerdetails">
                    <h3>Payment</h3><br />
                    <h4>Customer Details</h4><br />

                    @foreach (var customer in dbContext.Customers)
                    {
                        if (customer.Id == UserId)
                        {
                            <div class="form-group">
                                <label for="name">Name</label>
                                <small>Fill in your first and lastname</small>
                                <div class="row">
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" id="name" placeholder="Firstname" value="@customer.FirstName">
                                    </div>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" id="name" placeholder="Lastname" value="@customer.LastName" />
                                    </div>
                                </div>
                            </div>
                            @foreach (var location in dbContext.Locations)
                            {
                                if (location.Id == customer.LocationId)
                                {
                                    <div class="form-group">
                                        <label for="locationaddress">Address</label><br />
                                        <small>Fill in your address including house number</small>
                                        <input type="text" id="locationaddress" class="form-control" value="@location.Address" />
                                    </div>
                                    <div class="form-group">
                                        <label for="locationcity">City</label><br />
                                        <small>Fill in the city</small>
                                        <input type="text" id="locationcity" class="form-control" value="@location.City"/>
                                    </div>
                                    <div class="form-group">
                                        <label for="locationzip">ZipCode</label><br />
                                        <small>Fill in the zipcode</small>
                                        <input type="text" id="locationzip" class="form-control" value="@location.ZipCode"/>
                                    </div>
                                    <div class="form-group">
                                        <label for="locationcountry">Country</label><br />
                                        <small>Fill in the country</small>
                                        <input type="text" id="locationcountry" class="form-control" value="@location.CountryCode"/>
                                    </div>
                                }
                            }
                            <div class="form-group">
                                <label for="birthdate">Date of Birth</label>
                                <small>Fill in your date of birth</small>
                                <input class="form-control" type="date" id="birthdate">
                            </div>
                        }
                    }

                    <p>Choose your desired payment method below and finish your reservation.</p>
                    <p>Payment of €@totalCost.ToString("00.00")</p>
                </div>
            </div>
        </div>
    </Authorized>                   
    <NotAuthorized>
        <div class="payment">
            <p>You do not have permission to access this page. Please log in and try again.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public decimal totalCost;
    public decimal totalExtraCost;
    public decimal totalCarCost;

    [Parameter]
    public int carId { get; set; }

    [Parameter]
    public string pickupId { get; set; }

    [Parameter]
    public string pickupDate { get; set; }

    [Parameter]
    public string pickupTime { get; set; }

    [Parameter]
    public string dropoffId { get; set; }

    [Parameter]
    public string dropoffDate { get; set; }

    [Parameter]
    public string dropoffTime { get; set; }

    [Parameter]
    public string extras { get; set; }

    public string pickupLocation = string.Empty;
    public string dropoffLocation = string.Empty;

    public int UserId = 0;

    public Reservation reservationToAdd = new Reservation();

    Customer customer { get; set; }
    List<Car> Cars = new List<Car>();
    List<Extra> extraList = new List<Extra>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cars = await car_service.GetCarAsync(0);

        foreach (var location in dbContext.Locations)
        {
            if (location.Id == Int32.Parse(pickupId))
            {
                pickupLocation = location.City;
            }
        }

        foreach (var location in dbContext.Locations)
        {
            if (location.Id == Int32.Parse(dropoffId))
            {
                dropoffLocation = location.City;
            }
        }

        var authState = await authenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            UserId = user.Id;
            foreach (var Customer in dbContext.Customers)
            {
                if (UserId == Customer.Id)
                {
                    customer = Customer;
                }
            }
        }

        //specifying date & time for reservation in DateTimeOffset (Utc)
        string dayPickupString = pickupDate[0].ToString() + pickupDate[1].ToString();
        int dayPickup = Int32.Parse(dayPickupString);
        string monthPickupString = pickupDate[2].ToString() + pickupDate[3].ToString();
        int monthPickup = Int32.Parse(monthPickupString);
        string yearPickupString = pickupDate[4].ToString() + pickupDate[5].ToString() + pickupDate[6].ToString() + pickupDate[7].ToString();
        int yearPickup = Int32.Parse(yearPickupString);

        string timePickupString = pickupTime[0].ToString() + pickupTime[1].ToString();
        int timePickup = Int32.Parse(timePickupString);

        string dayDropoffString = dropoffDate[0].ToString() + dropoffDate[1].ToString();
        int dayDropoff = Int32.Parse(dayDropoffString);
        string monthDropoffString = dropoffDate[2].ToString() + dropoffDate[3].ToString();
        int monthDropoff = Int32.Parse(monthDropoffString);
        string yearDropoffString = dropoffDate[4].ToString() + dropoffDate[5].ToString() + dropoffDate[6].ToString() + dropoffDate[7].ToString();
        int yearDropoff = Int32.Parse(yearDropoffString);

        string timeDropoffString = dropoffTime[0].ToString() + dropoffTime[1].ToString();
        int timeDropoff = Int32.Parse(timeDropoffString);

        DateTime datePickup = new DateTime(yearPickup, monthPickup, dayPickup, timePickup, 0, 0);

        DateTimeOffset pickup = DateTime.SpecifyKind(datePickup, DateTimeKind.Utc);

        DateTime dateDropoff = new DateTime(yearDropoff, monthDropoff, dayDropoff, timeDropoff, 0, 0);

        DateTimeOffset dropoff = DateTime.SpecifyKind(dateDropoff, DateTimeKind.Utc);

        //Specifying the customer who makes reservation

        //Specifying car to be reservated

        List<int> extraIds = new List<int>();
        Car car = new Car();

        if (!(extras is null))
        {
            foreach (char extra in extras)
            {
                int extraToAdd = Int32.Parse(extra.ToString());
                extraIds.Add(extraToAdd);
            }

            foreach (var extra in dbContext.Extras)
            {
                foreach (int extraId in extraIds)
                {
                    if (extra.Id == extraId)
                    {
                        extraList.Add(extra);
                    }
                }
            }
        }

        foreach (var targetCar in Cars)
        {
            if (carId == targetCar.Id)
            {
                car = targetCar;
            }
        }
        //Car to reserver
        reservationToAdd = Reservation.Create(customer, car, pickup, dropoff, extraList.ToArray());

        //Calculate cost of reservation
        decimal totalHours = Convert.ToDecimal((dropoff - pickup).TotalHours);
        var hourlyRate = car.Model.DayRate / 24;
        totalCost = totalHours * hourlyRate;
        totalCarCost = totalCost;
        //Including extras
        foreach(var extra in extraList)
        {
            totalCost += (extra.Cost/24) * totalHours;
            totalExtraCost += (extra.Cost / 24) * totalHours;
        }

        await reservation_service.AddReservationAsync(reservationToAdd);
    }
}
