@page "/reservations"
@using QARS.Data.Models
@using Microsoft.AspNetCore.Identity
@inject ReservationServices service
@inject CarServices car_service
@inject AppDbContext dbContext
@inject UserManager<User> UserManager

<link rel="searchbox stylesheet" href="/css/manage.css">

<AuthorizeView Roles="Customer">
    <Authorized>
        <div class="row d-flex justify-content-between">
            <div class="col-md-3">
                <UserDashboard />
            </div>

            <div class="col-md-9">
                <div class="back container">
                    <div class="heading">
                        <h1 class="display-3" style="text-align: left;">Reservations</h1>
                        <p class="lead" style="text-align: left;">All your reservations are displayed in the table below. Click 'show' to see the reservation details or use the 'delete' button to cancel a reservation.</p>
                    </div>

                    <div class="customtablerow row bg-light">
                        <table class="table">
                            <thead class="thead-light">
                                <tr>
                                    <th scope="col">ID</th>
                                    <th scope="col">Car</th>
                                    <th scope="col">Store</th>
                                    <th scope="col">Pickup date</th>
                                    <th scope="col">Dropoff date</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Reservations.Any())
                                {
                                    @foreach (var reservation in Reservations)
                                    {
                                        <tr>
                                            <td scope="col">@reservation.Id</td>
                                            @foreach (var car in Cars)
                                            {
                                                if (car.Id == reservation.CarId)
                                                {
                                                    <td>@car.Model.Brand @car.Model.Type</td>
                                                    <td>@car.Store.Name</td>
                                                }
                                            }

                                            <td>@reservation.Start.ToString("dd-MM-yyyy")</td>
                                            <td>@reservation.End.ToString("dd-MM-yyyy")</td>
                                            <td><button class="btn btn-danger" @onclick="(() => DeleteReservation(reservation))">Delete</button>  <button @onclick="@(() => ShowReservation(reservation))" class="btn btn-warning">Show</button></td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr><td colspan="6"><strong>No reservations yet</strong></td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You do not have permission to access this page. Please log in and try again.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<Reservation> Reservations = new List<Reservation>();
    List<Car> Cars = new List<Car>();
    public int UserId = new int();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            UserId = user.Id;
        }

        Cars = await car_service.GetCarAsync(0);

        await RefreshReservations(UserId);

    }
    private async Task RefreshReservations(int userid)
    {
        Reservations = await service.GetReservationAsync(userid);
    }

    private async Task DeleteReservation(Reservation reservation)
    {
        await service.DeleteReservationAsync(reservation);
        await RefreshReservations(UserId);
    }

    [CascadingParameter] public IModalService Modal { get; set; }
    async Task ShowReservation(Reservation reservation)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditReservation.Reservation), reservation);

        var editModal = Modal.Show<EditReservation>("Show Reservation", parameters);
        var result = await editModal.Result;
        StateHasChanged();
    }
}
